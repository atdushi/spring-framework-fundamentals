<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"

       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!--    Data Sources-->
    <!--    <bean id="jndiDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">-->
    <!--        &lt;!&ndash;из glassfish&ndash;&gt;-->
    <!--        <property name="jndiName" value="jdbc/Books"/>-->
    <!--    </bean>-->

    <!--    https://docs.spring.io/spring-framework/docs/4.0.2.RELEASE/javadoc-api/-->
    <!--    <bean id="simpleDriverDataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">-->
    <!--        <property name="driverClass" value="org.hsqldb.jdbcDriver"/>-->
    <!--        <property name="url" value="jdbc:hsqldb:file:database.dat;shutdown=true"/>-->
    <!--        <property name="username" value="sa"/>-->
    <!--        <property name="password" value=""/>-->
    <!--    </bean>-->

    <!--    https://javadoc.io/doc/commons-dbcp/commons-dbcp/1.4/index.html-->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="org.hsqldb.jdbcDriver"/>
        <property name="url" value="jdbc:hsqldb:file:database.dat;shutdown=true"/>
        <property name="username" value="sa"/>
        <property name="password" value=""/>
    </bean>

    <!--    Templates-->
    <!--    JPA-->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="showSql" value="true"/>
                <property name="generateDdl" value="true"/>
            </bean>
        </property>
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--Hibernate-->
    <!--    <bean id="hibernateTemplate" class="org.springframework.orm.hibernate4.HibernateTemplate" autowire="byType"/>-->

    <!--    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">-->
    <!--        <property name="dataSource" ref="dataSource"/>-->
    <!--        <property name="packagesToScan">-->
    <!--            <list>-->
    <!--                <value>com.virtualpairprogrammers.avalon.domain</value>-->
    <!--            </list>-->
    <!--        </property>-->
    <!--        <property name="hibernateProperties">-->
    <!--            <props>-->
    <!--                <prop key="hibernate.show_sql">true</prop>-->
    <!--                <prop key="hibernate.hbm2ddl.auto">update</prop>-->
    <!--            </props>-->
    <!--        </property>-->
    <!--    </bean>-->

    <!--    JDBC-->
    <!--    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate" autowire="constructor">-->
    <!--        &lt;!&ndash;        <constructor-arg ref="dataSource"/>&ndash;&gt;-->
    <!--    </bean>-->

    <!-- Transaction Manager for the Project -->
    <!--    JPA-->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager" autowire="byType"/>

    <!--    Hibernate-->
    <!--    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager"-->
    <!--          autowire="byType">-->
    <!--        &lt;!&ndash;        <property name="dataSource" ref="basicDataSource"/>&ndash;&gt;-->
    <!--    </bean>-->

    <!--    JDBC-->
    <!--    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"-->
    <!--          autowire="byType">-->
    <!--        &lt;!&ndash;        <property name="dataSource" ref="basicDataSource"/>&ndash;&gt;-->
    <!--    </bean>-->

    <!--    DAO beans-->
    <!--    <bean id="bookDao" class="com.virtualpairprogrammers.avalon.data.BookDaoCleanerJdbcImpl"-->
    <!--          init-method="createTables"/>-->

    <!--    Service beans-->
    <!--    <bean id="bookService" class="com.virtualpairprogrammers.avalon.services.BookServiceProductionImpl">-->
    <!--        &lt;!&ndash;        <constructor-arg ref="bookDao"/>&ndash;&gt;-->
    <!--    </bean>-->

    <!--    <bean id="accountService" class="com.virtualpairprogrammers.avalon.services.AccountsServiceMockImpl"/>-->

    <!--    <bean id="purchasingService"-->
    <!--          class="com.virtualpairprogrammers.avalon.services.PurchasingServiceImpl"-->
    <!--          lazy-init="true">-->

    <!--        &lt;!&ndash;        <constructor-arg ref="accountService"/>&ndash;&gt;-->
    <!--        &lt;!&ndash;        <constructor-arg ref="bookService"/>&ndash;&gt;-->
    <!--    </bean>-->

    <!-- Advice -->
    <!--    <bean id="loggingAdvice" class="com.virtualpairprogrammers.avalon.advice.SimpleLoggingAdvice"/>-->

    <!--    <bean id="performanceTimingAdviceOld" class="com.virtualpairprogrammers.avalon.advice.PerformanceTimingAdviceOld"/>-->

    <!--    <bean id="performanceTimingAdvice" class="com.virtualpairprogrammers.avalon.advice.PerformanceTimingAdvice"/>-->

    <!--  Tells spring to search for AOP annotations -->
    <aop:aspectj-autoproxy/>

    <!--    Добавлено в Spring 2. Предпочтительный вариант-->
    <!--    <aop:config>-->
    <!--        <aop:pointcut id="allServiceMethodsThatReturnLists"-->
    <!--                      expression="execution (java.util.List com.virtualpairprogrammers.avalon.services.*.* (..) )"/>-->
    <!--        <aop:aspect ref="performanceTimingAdvice">-->
    <!--            <aop:around method="performTimingMeasurement"-->
    <!--                        pointcut="execution (* com.virtualpairprogrammers.avalon.services.*.* (..) )"/>-->
    <!--            <aop:before method="beforeAdviceTesting" pointcut-ref="allServiceMethodsThatReturnLists"/>-->
    <!--        </aop:aspect>-->
    <!--    </aop:config>-->

    <!-- Generated Proxies (old style)-->
    <!--        <bean id="bookServiceProxy" class="org.springframework.aop.framework.ProxyFactoryBean">-->
    <!--            <property name="proxyInterfaces" value="com.virtualpairprogrammers.avalon.services.BookService"/>-->
    <!--            <property name="interceptorNames">-->
    <!--                <list>-->
    <!--                    <value>performanceTimingAdviceOld</value>-->
    <!--                </list>-->
    <!--            </property>-->
    <!--            <property name="target" ref="bookService"/>-->
    <!--        </bean>-->

    <!--  Transaction Configuration -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!--    Config via xml rather than annotations-->
    <!--    <tx:advice id="allMethodsToBeTransactional">-->
    <!--        <tx:attributes>-->
    <!--            <tx:method name="*"/>-->
    <!--        </tx:attributes>-->
    <!--    </tx:advice>-->

    <!--    <aop:config>-->
    <!--        <aop:advisor advice-ref="allMethodsToBeTransactional"-->
    <!--                     pointcut="execution(* com.virtualpairprogrammers.avalon.services..*.*(..))"/>-->
    <!--    </aop:config>-->

    <context:component-scan base-package="com.virtualpairprogrammers, speltesting"/>
</beans>

